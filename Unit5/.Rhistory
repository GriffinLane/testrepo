a = (3,2,4)
a = [2]
a = 3,6,8
a = 3 4 5
a = 3
a
install.packages("ggplot2")
?update
update.packages
version()
sessionInfo()
a <- 5,3,2
a <- (5,3,2)
a <- c(7,5,4,3)
sd(a)
Griffin.Dick.Size -> "Huge"
Griffin.Dick.Size -> c("Huge")
gpa.sec.a -> c(3.13, 3.55, 2.92, 2.73, 3.00 )
Griffin
Griffin <- c()
Griffin.cock <- c()
Griffin.cock.size <- c(Huge)
Griffin.cock.size <- c("Huge")
Griffin.cock.size
clear()
cls()
?cls
??cls
cd
sd
lr
slr
summary(Griffin.cock)
summary(Griffin.cock.size)
summary(Griffin.cock)
Griffin.cock
Griffin.cock = c("enormous slab of beef")
summary(Griffin.cock)
Griffin.cock
??rlm
library(MASS)
Generate(n, nsim){}
Generate(n, nsim){
Generate(n, nsim)
Generate <- Generate(n, nsim)
Generate <- function(n, nsim) {
x <- rnorm(n)
medians <- median(x)
}
medians <- numeric()
Generate <- function(n,nsim)
{
for(i in 1:nsim)
{
x<- rnorm(n)
medians <- median(x)
}
}
sessionInfo()
GenerateSamples <- function(n, nsim){
for (i in 1:nsim){
x <-dexp(n)
medians <- median(x)
medians
}
}
sampMedians <- GenerateSamples(10,1000)
hist(sampMedians)
class(sampMedians)
GenerateSamples <- function(n, nsim){
for (i in 1:nsim){
x <-dexp(n)
medians <- median(x)
}
}
sampMedians <- GenerateSamples(10,1000)
hist(sampMedians)
class(sampMedians)
GenerateSamples <- function(n, nsim){
for (i in 1:nsim){
x <-dexp(n)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples(10,1000)
hist(sampMedians)
class(sampMedians)
n <- 10
nsim <- 1000
sampMedians <- GenerateSamples(10,1000)
summary(sampMedians)
GenerateSamples <- function(n = 10, nsim = 1000){
for (i in 1:nsim){
x <-dexp(n)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(n = 10, nsim = 1000){
for (i in 1:nsim){
x <-rexp(n)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(){
for (i in 1:1000){
x <-rexp(10)
medians <- median(x)
return(medians)
}
}
summary(sampMedians)
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(){
x = numeric()
for (i in 1:1000){
x <-rexp(10)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
summary(sampMedians)
hist(sampMedians)
GenerateSamples <- function(){
x = numeric()
for (i in 1:1000){
x <-rnorm(10)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
hist(sampMedians)
GenerateSamples <- function(){
x = numeric()
medians <- numeric()
for (i in 1:1000){
x <-rnorm(10)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(){
x <- numeric()
medians <- numeric()
for (i in 1:1000){
x <-rnorm(10)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(){
medians <- numeric(1000)
for (i in 1:1000){
x <-rnorm(10)
medians <- median(x)
return(medians)
}
}
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(){
medians <- numeric(1000)
for (i in 1:1000){
x <-rnorm(10)
medians[i] <- median(x)
}
return(medians)
}
sampMedians <- GenerateSamples()
summary(sampMedians)
hist(sampMedians)
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
sampMedians <- GenerateSamples()
summary(sampMedians)
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
multiSamp <- numeric(50)
for(x in 1:50){
multiSamp[x] <- GenerateSamples()
}
hist(multiSamp)
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
multiSamp <- numeric(50)
for(x in 1:50){
multiSamp[x] <- GenerateSamples()
}
hist(multiSamp)
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
multiSamp <- numeric(50)
for(x in 1:50){
multiSamp[x] <- GenerateSamples()
}
hist(multiSamp)
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
multiSamp <- numeric(50)
for(x in 1:50){
multiSamp[x] <- GenerateSamples()
}
hist(multiSamp)
warnings()
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
multiSamp <- numeric(numeric(50))
for(x in 1:50){
multiSamp[x] <- GenerateSamples()
}
hist(multiSamp)
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rnorm(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
multiSamp <- GenerateSamples(n=50)
hist(multiSamp)
###
#function to calculate the mean of
#param='nsim' random samples from exponential
#distributions of size param='n'
##
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rexp(n)
medians[i] <- median(x)
}
return(medians)
}
hist(GenerateSamples())
#Below is a function to calculate the mean of
#param='nsim' random samples from exponential
#distributions of size param='n'
##
#Date Modified: 12:14AM EST 9/3/2017
##
#Creator: Griffin J. Lane
##
#Version: R version 3.4.1 (2017-06-30)
####
GenerateSamples <- function(n=10, nsim =1000){
medians <- numeric(nsim)
for (i in 1:nsim){
x <-rexp(n)			#Random exponential distribution, rate=1
medians[i] <- median(x) 	#retreive samples median
}
return(medians)
}
hist(GenerateSamples()) 	#generate histogram
hist(GenerateSamples(n=50))	#generate
hist(GenerateSamples())
hist(GenerateSamples(n=50))
hist(GenerateSamples())
hist(GenerateSamples())
hist(GenerateSamples())
hist(GenerateSamples())
hist(GenerateSamples(n=50))
hist(GenerateSamples(n=50))
hist(GenerateSamples(n=50))
hist(GenerateSamples())
summary(GenerateSamples())
summary(GenerateSamples(n=50))
sd(GenerateSamples())
sd(GenerateSamples(50))
swirl
swirl()
library(swirl)
library('swirl')
library("swirl")
list.files()
setwd("!_SKOOL")
setwd("Doing Data Science")
list.files()
setwd("Unit5")
list.files()
ao <- read.csv("appleorange.cvs", header = TRUE, stringsAsFactors = FALSE)
ao <- read.csv("appleorange.csv", header = TRUE, stringsAsFactors = FALSE)
stability <- read.csv("stability.csv", header = TRUE)
names("country", "countryNumber", "products", "productNumber", "tonnes", "year")
names(ao) <- ("country", "countryNumber", "products", "productNumber", "tonnes", "year")
head(ao)
str(head)
str(ao)
ao <- ao[3:700,]
ao$countryNumber <- as.integer(ao$countryNumber)
str(ao)
names(ao) <- c("country", "countryNumber", "products", "productNumber", "tonnes", "year")
str(ao)
ao$countryNumber <- as.integer(ao$countryNumber)
str(ao)
fslines <- which(ao$country == "Food supply quantity (tonnes) (tonnes)")
ao <- ao[(-1 *fslines),]
str(ao)
ao$year <- 2009
str(ao)
ao$tonnes <- gsub("Ê", "", ao$tonnes)
str(ao)
ao$tonnes <- gsub("tonnes \\(\\)", "", ao$tonnes)
str(ao)
ao$tonnes <- as.numeric(ao$tonnes)
str(ao)
download("https://raw.githubusercontent.com/thughtfulbloke/faoexample/master/appleorange.csv", destfile="appleorange.csv")
download("https://raw.githubusercontent.com/thughtfulbloke/faoexample/master/stability.csv", destfile="stability.csv")
ao <- read.csv("appleorange.csv", header = TRUE, stringsAsFactors = FALSE)
stability <- read.csv("stability.csv", header = TRUE)
names(ao) <- c("country", "countryNumber", "products", "productNumber", "tonnes", "year")
ao <- ao[3:700,]
ao$countryNumber <- as.integer(ao$countryNumber)
fslines <- which(ao$country == "Food supply quantity (tonnes) (tonnes)")
ao <- ao[(-1 *fslines),]
ao$tonnes <- gsub("Ê", "", ao$tonnes)
ao$tonnes <- gsub("tonnes \\(\\)", "", ao$tonnes)
str(ao)
ao$tonnes <- gsub(", ", "", ao$tonnes)
str(ao)
ao$tonnes <- as.numeric(ao$tonnes)
oranges <- ao[ao$productNumber == 2611, c(1,2,5)]
apples <- ao[ao$productNumber == 2617, c(1,2,5)]
oranges[oranges$country == Myanmar]
oranges[oranges$country == "Myanmar"]
oranges[oranges$country == "Turkministan"]
oranges
countries <- oranges[oranges$tonnes == NA]
countries <- oranges[oranges$tonnes == ""]
countries <- oranges[oranges$tonnes == "NA"]
myanmar <- oranges[oranges$country == "Myanmar"]
myanmar <- oranges[oranges$country == "Myanmar"]
myanmar <- oranges[oranges$country == "Montenegro"]
myanmar <- oranges[oranges$country == Montenegro]
myanmar <- oranges[oranges$country == 'Montenegro']
oranges[oranges$country == 'Montenegro']
oranges[oranges$country == 'Montenegro,']
oranges[oranges$country == 'Montenegro',]
oranges[oranges$country == 'Myanmar',]
oranges[oranges$country == 'Suriname',]
oranges[oranges$country == 'Suriname'&'Myanmar',]
oranges[oranges$country == 'Suriname'|'Myanmar',]
oranges[oranges$country == 'Suriname'|oranges$country == 'Myanmar',]
oranges[oranges$country == 'Turkministan'|oranges$country == 'Myanmar',]
oranges[oranges$country == 'Turkministan',]
